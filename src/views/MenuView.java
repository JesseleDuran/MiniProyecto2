/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JMenuItem;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jessele Durán
 */
public class MenuView extends javax.swing.JFrame {

    /**
     * Creates new form MenuView
     */
    public MenuView(Object ci) throws Exception {
        super("Menú Principal");
        initComponents();
        this.ci = ci;
        initButtons();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        registrarInscripcionButton = new javax.swing.JButton();
        nombreLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        registrarMenu = new javax.swing.JMenu();
        verMenu = new javax.swing.JMenu();
        reportesMenu = new javax.swing.JMenu();
        horariosReporte = new javax.swing.JMenuItem();
        aulasReporte = new javax.swing.JMenuItem();
        cursosReporte = new javax.swing.JMenuItem();
        cantidadInscriosReporte = new javax.swing.JMenuItem();
        instructoresReporte = new javax.swing.JMenuItem();
        cerrrarSesionMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel3.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        jLabel3.setText("Últimas Transacciones");

        registrarInscripcionButton.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        registrarInscripcionButton.setText("Realizar Inscripción");
        registrarInscripcionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registrarInscripcionButtonActionPerformed(evt);
            }
        });

        nombreLabel.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        nombreLabel.setText("Bienvenida, Nombre Apellido");

        menuBar.setAlignmentX(0.9F);

        registrarMenu.setText("Registrar");
        registrarMenu.setActionCommand("3");
        registrarMenu.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        menuBar.add(registrarMenu);

        verMenu.setText("Ver");
        verMenu.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        menuBar.add(verMenu);

        reportesMenu.setText("Reportes");
        reportesMenu.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N

        horariosReporte.setText("Horarios Actuales");
        horariosReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horariosReporteActionPerformed(evt);
            }
        });
        reportesMenu.add(horariosReporte);

        aulasReporte.setText("Estatus de las Aulas");
        aulasReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aulasReporteActionPerformed(evt);
            }
        });
        reportesMenu.add(aulasReporte);

        cursosReporte.setText("Cursos Activos");
        cursosReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cursosReporteActionPerformed(evt);
            }
        });
        reportesMenu.add(cursosReporte);

        cantidadInscriosReporte.setText("Cantidad de Inscritos por Curso");
        cantidadInscriosReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cantidadInscriosReporteActionPerformed(evt);
            }
        });
        reportesMenu.add(cantidadInscriosReporte);

        instructoresReporte.setText("Instructores con su carga de Cursos");
        instructoresReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instructoresReporteActionPerformed(evt);
            }
        });
        reportesMenu.add(instructoresReporte);

        menuBar.add(reportesMenu);

        cerrrarSesionMenu.setText("Cerrar Sesión");
        cerrrarSesionMenu.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        cerrrarSesionMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cerrrarSesionMenuMouseClicked(evt);
            }
        });
        cerrrarSesionMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cerrrarSesionMenuActionPerformed(evt);
            }
        });
        menuBar.add(cerrrarSesionMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 616, Short.MAX_VALUE)
                .addGap(18, 18, 18))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(registrarInscripcionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(210, 210, 210))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(nombreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nombreLabel)
                        .addGap(39, 39, 39))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(registrarInscripcionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void horariosReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horariosReporteActionPerformed
        // TODO add your handling code here:
        Controller<Horario> ctrl = new Controller<Horario>(Horario.class);

        String result;
        try {
            result = PDFGenerator.createPDFFromHashMapList(this, ctrl.getAll(db), "Horarios Actuales");
            Desktop.getDesktop().open(new File(result));
        } catch (Exception ex) {
            //TODO Añadir error !
        }

    }//GEN-LAST:event_horariosReporteActionPerformed

    private void aulasReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aulasReporteActionPerformed
        // TODO add your handling code here:
        Controller<Aula> aulas = new Controller<Aula>(Aula.class);

        String result;
        try {
            result = PDFGenerator.createPDFFromHashMapList(this, aulas.getAll(db), "Estatus de Aulas");
            Desktop.getDesktop().open(new File(result));
        } catch (Exception ex) {
            //TODO Añadir error !
        }
    }//GEN-LAST:event_aulasReporteActionPerformed

    private void cursosReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cursosReporteActionPerformed
        // TODO add your handling code here:
        ReportesController reporte = new ReportesController();

        String result;
        try {
            result = PDFGenerator.createPDFFromHashMapList(this, reporte.mostrarCursosActivos(db), "Cursos Activos");
            Desktop.getDesktop().open(new File(result));
        } catch (Exception ex) {
            //TODO Añadir error !
        }
    }//GEN-LAST:event_cursosReporteActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked

    }//GEN-LAST:event_jTable1MouseClicked

    private void cerrrarSesionMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cerrrarSesionMenuActionPerformed
        System.exit(0);
    }//GEN-LAST:event_cerrrarSesionMenuActionPerformed

    private void cerrrarSesionMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cerrrarSesionMenuMouseClicked
        System.exit(0);
    }//GEN-LAST:event_cerrrarSesionMenuMouseClicked

    private void registrarInscripcionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registrarInscripcionButtonActionPerformed
        try {
            InscripcionRegisterView inscripcionRegisterView = new InscripcionRegisterView(db, adm);
            inscripcionRegisterView.setVisible(true);
        } catch (Exception ex) {
            Logger.getLogger(MenuView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_registrarInscripcionButtonActionPerformed

    private void cantidadInscriosReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cantidadInscriosReporteActionPerformed
        // TODO add your handling code here:
        ReportesController reporte = new ReportesController();

        String result;
        try {
            result = PDFGenerator.createPDFFromHashMapList(this, reporte.inscritosPorCurso(db), "Cantidad de Inscritos por Curso");
            Desktop.getDesktop().open(new File(result));
        } catch (Exception ex) {
            //TODO Añadir error !
        }
    }//GEN-LAST:event_cantidadInscriosReporteActionPerformed

    private void instructoresReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_instructoresReporteActionPerformed
        // TODO add your handling code here:
        ReportesController reporte = new ReportesController();

        String result;
        try {
            result = PDFGenerator.createPDFFromHashMapList(this, reporte.instructoresPorCurso(db), "Profesores con su curso");
            Desktop.getDesktop().open(new File(result));
        } catch (Exception ex) {
            //TODO Añadir error !
        }
    }//GEN-LAST:event_instructoresReporteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JMenuItem aulasReporte;
    public javax.swing.JMenuItem cantidadInscriosReporte;
    public javax.swing.JMenu cerrrarSesionMenu;
    public javax.swing.JMenuItem cursosReporte;
    public javax.swing.JMenuItem horariosReporte;
    public javax.swing.JMenuItem instructoresReporte;
    public javax.swing.JLabel jLabel3;
    public javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable jTable1;
    public javax.swing.JMenuBar menuBar;
    public javax.swing.JLabel nombreLabel;
    public javax.swing.JButton registrarInscripcionButton;
    public javax.swing.JMenu registrarMenu;
    public javax.swing.JMenu reportesMenu;
    public javax.swing.JMenu verMenu;
    // End of variables declaration//GEN-END:variables
    public Object ci;
    private void initButtons()
    {
        addEdit();
        nombreLabel.setText("Bienvenida, Administrador de cédula: " + ci);
    }


    private void addEdit()
    {
        /*JMenuItem participante = new JMenuItem("Participante");
        participante.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e)
            {
                try {
                    ClienteIndexView clienteEditView = new ClienteIndexView(db);
                    clienteEditView.setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(MenuView.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        });
        verMenu.add(participante);

        JMenuItem curso = new JMenuItem("Curso");
        curso.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e)
            {
                try {
                    CursoIndexView indexView = new CursoIndexView(db);
                    indexView.setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(MenuView.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        verMenu.add(curso);

        JMenuItem instructor = new JMenuItem("Instructor");
        instructor.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e)
            {
                InstructorIndexView instructorEditView = null;
                try {
                    instructorEditView = new InstructorIndexView(db);
                } catch (Exception ex) {
                    Logger.getLogger(MenuView.class.getName()).log(Level.SEVERE, null, ex);
                }
                instructorEditView.setVisible(true);
            }
        });
        verMenu.add(instructor);



        JMenuItem admin = new JMenuItem("Administrador");
        admin.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e)
            {
               AdminIndexView adminEditView;
                try {
                    adminEditView = new AdminIndexView(db);
                    adminEditView.setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(MenuView.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        });
        verMenu.add(admin);

        JMenuItem horario = new JMenuItem("Horario");
        horario.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e)
            {
                try {
                    HorarioIndexView horarioEditView = new HorarioIndexView(db);
                    horarioEditView.setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(MenuView.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        verMenu.add(horario);

        JMenuItem aula = new JMenuItem("Aula");
        aula.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e)
            {
                try {
                    AulaIndexView indexView = new AulaIndexView(db);
                    indexView.setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(MenuView.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        verMenu.add(aula); */


    }

}
